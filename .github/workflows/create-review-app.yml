name: Create review app

defaults:
  run:
    shell: bash -ieo pipefail {0}

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      service:
        required: true
        type: string
      base_app_id:
        required: true
        type: string
    secrets:
      do_token:
        required: true
      service_spec:
        required: false
    outputs:
      review_app_id:
        description: The digitalocean app id of the created review app
        value: ${{ jobs.review.outputs.review_app_id }}
      review_url:
        description: The created review url
        value: ${{ jobs.review.outputs.review_url }}

jobs:
  review:
    runs-on: self-hosted
    outputs:
      review_app_id: ${{ steps.deploy.outputs.review_app_id }}
      review_url: ${{ steps.review.outputs.review_url }}
    steps:
      - name: Checkout administration
        uses: actions/checkout@v3
        with:
          repository: Animately/administration
          token: ${{ github.token }}

      - name: Install do-spec
        run: cd do-spec; npm install && npm install -g .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.do_token }}

      - name: Login to registry
        run: doctl registry login

      - name: Generate app-spec.json from doctl
        run: |
          doctl apps spec get ${{ inputs.base_app_id }} --format json > app-spec.json

      - name: Generate app-replace.json from inputs
        env:
          REVIEW_NAME: ${{ inputs.name }}
          SERVICE_NAME: ${{ inputs.service }}
        run: |
          appname=$(echo "$SERVICE_NAME-$REVIEW_NAME" | cut -c -28)

          cat <<EOT>> app-replace.json
          { "name": "${appname}-rev" }
          EOT

      - name: Remove domain settings (use DO domain)
        run: |
          echo "$(do-spec delete-top-level-props app-spec.json domains)" > app-spec.json

      - name: Merge app-replace.json into app-spec.json
        run: |
          echo "$(do-spec merge-top-level app-spec.json app-replace.json)" > app-spec.json

      - name: Determine presence of service_spec
        id: service_spec_check
        if: ${{ env.SERVICE_SPEC != '' }}
        env:
          SERVICE_SPEC: ${{ secrets.service_spec }}
        run: echo "defined=true" >> "$GITHUB_OUTPUT"

      - name: Get other services
        id: extract_services
        run: |
          service_list=$(echo "console.log(require('./app-spec.json').services.filter(s => s.name !== '${{ inputs.service }}').map(s => s.name).join(','))" | node -)
          echo "services=$service_list" >> "$GITHUB_OUTPUT"
          echo "Services to delete: $service_list"

      - name: Remove other services from spec
        if: ${{ steps.extract_services.outputs.services != '' }}
        run: |
          echo "$(do-spec delete-services app-spec.json ${{ steps.extract_services.outputs.services }})" > app-spec.json

      - name: Generate service spec
        if: ${{ steps.service_spec_check.outputs.defined == 'true' }}
        shell: bash
        run: echo -e '${{ secrets.service_spec }}' > service-spec.json

      - name: Merge service spec back into app-spec.json
        if: ${{ steps.service_spec_check.outputs.defined == 'true' }}
        run: |
          echo "$(do-spec merge-service app-spec.json ${{ inputs.service }} service-spec.json)" > app-spec.json

      - name: Debug app spec
        run: |
          echo "::group::App Spec"
          base64 -i app-spec.json
          echo "::endgroup::"

      - name: Deploy new review app to digitalocean
        id: deploy
        run: |
          app_id=$(doctl apps create --spec app-spec.json --format ID --no-header --wait)
          echo "review_app_id=$app_id" >> "$GITHUB_OUTPUT"

      - name: Get service route
        uses: sergeysova/jq-action@v2
        id: service_route
        continue-on-error: true
        with:
          cmd: |
            service_route=$(cat app-spec.json | jq -r ".ingress.rules[] | select(.component.name | contains(\"${{ inputs.service }}\")) | .match.path.prefix")
            echo "==> service route=$service_route"
            echo "path=$service_route" >> "$GITHUB_OUTPUT"

      - name: Get review url
        id: review
        run: |
          ingress=$(doctl apps get ${{ steps.deploy.outputs.review_app_id }} --format DefaultIngress --no-header)
          review_url="${ingress}${{ steps.service_route.outputs.path }}"
          echo "review_url=$review_url" >> "$GITHUB_OUTPUT"
          echo "==> ingress=$ingress"
          echo "==> service-route=${{ steps.service_route.outputs.path }}"
          echo "==> created review url: $review_url"

      - name: Clean up
        run: |
          rm app-spec.json
          rm app-replace.json
          rm service-spec.json

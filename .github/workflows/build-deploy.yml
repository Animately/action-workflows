name: Build & Push Docker image to Container Registry and Deploy to DO apps

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      environment:
        required: true
        type: string
      deploy_app_id:
        required: false
        type: string
      sha:
        required: false
        type: string
    secrets:
      do_token:
        required: true
      snyk_token:
        required: true
      envs:
        required: false
    outputs:
      deploy_id:
        description: The digitalocean deploy id
        value: ${{ jobs.build-deploy.outputs.deploy_id }}

jobs:
  build-deploy:
    runs-on: self-hosted
    env:
      SNYK_TOKEN: ${{ secrets.snyk_token }}
      TAG: registry.digitalocean.com/animately/${{ inputs.name }}:${{ inputs.environment }}
    outputs:
      deploy_id: ${{ steps.deployment.outputs.deploy_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha != null }}

      - name: Checkout code
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.do_token }}

      - name: Login to registry
        run: doctl registry login

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        id: cache-layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ inputs.environment }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ inputs.environment }}
            ${{ runner.os }}-buildx

      - name: Create secrets file
        run: echo "${{ secrets.envs }}" >> /tmp/secrets.txt

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          push: false
          load: true
          tags: ${{ env.TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          secret-files: |
            "envs=/tmp/secrets.txt"

      - name: Run Snyk to check Docker image for vulnerabilities
        if: "${{ env.SNYK_TOKEN != '' }}"
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          image: ${{ env.TAG }}
          args: --exclude-app-vulns --exclude-base-image-vulns --file=Dockerfile
          sarif: false

      - name: Push image
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          push: true
          tags: ${{ env.TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache-new
          cache-to: type=local,dest=/tmp/.buildx-cache-new-push,mode=max
          secret-files: |
            "envs=/tmp/secrets.txt"

      - name: Clean up secrets file
        run: rm -f /tmp/secrets.txt

      - name: Determine deployment
        id: determine-deployment
        continue-on-error: true
        run: |
          if [ "${{ steps.cache-layers.outputs.cache-hit }}" == "true" ] | [ -z "${{ inputs.deploy_app_id }}" ]; then
            echo "deploy=0" >> $GITHUB_OUTPUT
          else
            echo "deploy=1" >> $GITHUB_OUTPUT
          fi

      - name: Deploy DO apps
        if: contains(steps.determine-deployment.outputs.deploy, '1')
        id: deployment
        timeout-minutes: 30
        run: |
          echo "Create deployment for app: ${{ inputs.deploy_app_id }}"
          deploy_id=$(doctl apps create-deployment ${{ inputs.deploy_app_id }} --format ID --no-header --wait)
          echo "deploy_id=$deploy_id" >> $GITHUB_OUTPUT

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache /tmp/.buildx-cache-new
          mv /tmp/.buildx-cache-new-push /tmp/.buildx-cache
